{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport flush from 'styled-jsx/server';\nimport { ServerStyleSheets } from '@material-ui/styles';\nimport Document, { Head, Main, NextScript } from 'next/document';\nimport theme from '../theme';\nexport default class _class extends Document {\n  render() {\n    return __jsx(\"html\", {\n      lang: \"en\",\n      dir: \"ltr\"\n    }, __jsx(Head, null, __jsx(\"meta\", {\n      charSet: \"utf-8\"\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: theme.palette.primary.main\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\"\n    })), __jsx(\"body\", null, __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n}\n\n_defineProperty(_class, \"getInitialProps\", async ctx => {\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, props))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread({}, initialProps, {\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: __jsx(React.Fragment, null, sheets.getStyleElement(), flush() || null)\n  });\n});","map":null,"metadata":{},"sourceType":"module"}