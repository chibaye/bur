{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _temp;\n\nvar __jsx = React.createElement;\nimport clsx from 'clsx';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport ListItem from '@material-ui/core/ListItem';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Typography from '@material-ui/core/Typography';\nimport SimpleReactValidator from 'simple-react-validator';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Row from './row';\nimport Icon from './icons';\nimport Terms from './terms';\nimport Upload from './upload';\nimport Fieldset from './fieldset';\nimport { fileChange, inputChange, post } from '../lib/redux/actions/form';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nvar styles = function styles(theme) {\n  return {\n    '@global': {\n      '.srv-validation-message': {\n        color: '#900'\n      }\n    },\n    actions: {\n      display: 'flex',\n      width: '100%',\n      marginTop: 30,\n      marginBottom: 30,\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    typography: {\n      marginRight: theme.spacing() + 4\n    },\n    progress: {\n      color: 'white',\n      display: 'none'\n    },\n    show: {\n      display: 'block'\n    },\n    col: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%'\n    }\n  };\n};\n\nexport default withStyles(styles, {\n  withTheme: true\n})(connect(function (state) {\n  return state;\n}, {\n  fileChange: fileChange,\n  inputChange: inputChange,\n  post: post\n})((_temp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(_temp, _Component);\n\n  function _temp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, _temp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_temp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"validator\", new SimpleReactValidator({\n      autoForceUpdate: _assertThisInitialized(_this)\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (e) {\n      e.preventDefault();\n      var _this$props = _this.props,\n          data = _this$props.data,\n          post = _this$props.post;\n\n      if (_this.validator.allValid()) {\n        post(data);\n      } else {\n        _this.validator.showMessages();\n\n        alert('There are errors on the form.');\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(_temp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          classes = _this$props2.classes,\n          theme = _this$props2.theme,\n          data = _this$props2.data,\n          files = _this$props2.files,\n          loading = _this$props2.form.loading,\n          fileChange = _this$props2.fileChange,\n          inputChange = _this$props2.inputChange;\n      var ids = files.ids,\n          letter = files.letter,\n          certificate = files.certificate,\n          photos = files.photos,\n          payment = files.payment;\n      var names = data.names,\n          surname = data.surname,\n          phone = data.phone,\n          gender = data.gender,\n          address = data.address,\n          email = data.email,\n          birthday = data.birthday,\n          school = data.school,\n          major = data.major,\n          guardian = data.guardian,\n          guardianPhone = data.guardianPhone,\n          nrc = data.nrc;\n      return __jsx(\"form\", {\n        onSubmit: this.handleSubmit\n      }, __jsx(Row, {\n        title: \"Personal Details\"\n      }, __jsx(Fieldset, {\n        label: \"Given Names\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"names\",\n        onChange: inputChange,\n        value: names,\n        className: classes.textField,\n        placeholder: \"Enter exactly as stated on your NRC\"\n      }), this.validator.message('name', names, 'required'))), __jsx(Fieldset, {\n        label: \"Surname\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"surname\",\n        onChange: inputChange,\n        value: surname,\n        className: classes.textField,\n        placeholder: \"Enter exactly as stated on your NRC\"\n      }), this.validator.message('surname', surname, 'required'))), __jsx(Fieldset, {\n        label: \"Gender\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(RadioGroup, {\n        \"aria-label\": \"position\",\n        name: \"gender\",\n        value: gender,\n        onChange: inputChange,\n        row: true\n      }, __jsx(FormControlLabel, {\n        value: \"male\",\n        control: __jsx(Radio, {\n          color: \"primary\",\n          disableRipple: true\n        }),\n        label: \"Male\",\n        labelPlacement: \"end\"\n      }), __jsx(FormControlLabel, {\n        value: \"female\",\n        control: __jsx(Radio, {\n          color: \"primary\",\n          disableRipple: true\n        }),\n        label: \"Female\",\n        labelPlacement: \"end\"\n      })), this.validator.message('gender', gender, 'required'))), __jsx(Fieldset, {\n        label: \"NRC\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"nrc\",\n        onChange: inputChange,\n        value: nrc,\n        className: classes.textField,\n        placeholder: \"000000/00/0\"\n      }), this.validator.message('nrc', nrc, 'required'))), __jsx(Fieldset, {\n        label: \"birthday\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"birthday\",\n        onChange: inputChange,\n        value: birthday,\n        className: classes.textField,\n        placeholder: \"DD/MM/YYYY\"\n      }), this.validator.message('birthday', birthday, 'required')))), __jsx(Row, {\n        title: \"Contact Details\"\n      }, __jsx(Fieldset, {\n        label: \"Address\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"address\",\n        onChange: inputChange,\n        value: address,\n        className: classes.textField,\n        placeholder: \"Street, City/Town, Province\"\n      }), this.validator.message('address', address, 'required'))), __jsx(Fieldset, {\n        label: \"Phone number\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"phone\",\n        onChange: inputChange,\n        value: phone,\n        className: classes.textField,\n        InputProps: {\n          startAdornment: __jsx(InputAdornment, {\n            position: \"start\"\n          }, \"+260\")\n        }\n      }), this.validator.message('phone', phone, 'required'))), __jsx(Fieldset, {\n        label: \"Email Address\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"email\",\n        onChange: inputChange,\n        value: email,\n        className: classes.textField,\n        placeholder: \"Your active Email Address\"\n      }), this.validator.message('email', email, 'required|email')))), __jsx(Row, {\n        title: \"Guardian Details\",\n        subtitle: \"(if less than 21)\"\n      }, __jsx(Fieldset, {\n        label: \"Full Names\"\n      }, __jsx(TextField, {\n        name: \"guardian\",\n        onChange: inputChange,\n        value: guardian,\n        className: classes.textField,\n        placeholder: \"Guardian Full Name\"\n      })), __jsx(Fieldset, {\n        label: \"Guardian Phone\"\n      }, __jsx(TextField, {\n        name: \"guardianPhone\",\n        onChange: inputChange,\n        value: guardianPhone,\n        className: classes.textField,\n        placeholder: \"Guardian Phone Number\"\n      }))), __jsx(Row, {\n        title: \"Additional Details\"\n      }, __jsx(Fieldset, {\n        label: \"University/ College\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"school\",\n        onChange: inputChange,\n        value: school,\n        className: classes.textField\n      }), this.validator.message('school', school, 'required'))), __jsx(Fieldset, {\n        label: \"Major\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(TextField, {\n        name: \"major\",\n        onChange: inputChange,\n        value: major,\n        className: classes.textField\n      }), this.validator.message('major', major, 'required'))), __jsx(Fieldset, {\n        label: \"Academic Qualification\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(Upload, {\n        name: \"certificate\",\n        files: certificate,\n        onChange: fileChange\n      }), this.validator.message('certificate', certificate, 'required'))), __jsx(Fieldset, {\n        label: \"Acceptance/ Recommendation Letter\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(Upload, {\n        name: \"letter\",\n        files: letter,\n        onChange: fileChange\n      }), this.validator.message('acceptance/recommendation', letter, 'required'))), __jsx(Fieldset, {\n        label: \"NRC\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(Upload, {\n        name: \"ids\",\n        files: ids,\n        multiple: true,\n        onChange: fileChange\n      }), this.validator.message('nrc attachment', ids, 'required'))), __jsx(Fieldset, {\n        label: \"2 Passport Size Photos\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(Upload, {\n        name: \"photos\",\n        files: photos,\n        multiple: true,\n        onChange: fileChange\n      }), this.validator.message('passport photos', photos, 'required')))), __jsx(Row, {\n        title: \"Payment\"\n      }, __jsx(Fieldset, {\n        label: \"Deposit Slip\",\n        required: true\n      }, __jsx(\"div\", {\n        className: classes.col\n      }, __jsx(Upload, {\n        name: \"payment\",\n        files: payment,\n        onChange: fileChange\n      }), this.validator.message('deposit slip', payment, 'required')))), __jsx(Terms, null), __jsx(\"div\", {\n        className: classes.actions\n      }, __jsx(List, {\n        component: \"nav\"\n      }, __jsx(ListItem, null, __jsx(ListItemIcon, null, __jsx(Icon, {\n        name: \"check\",\n        fill: theme.palette.primary.main\n      })), __jsx(ListItemText, {\n        primary: \"I agree to the above Terms & Conditions\"\n      }))), __jsx(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        size: \"large\",\n        variant: \"contained\"\n      }, __jsx(Typography, {\n        className: classes.typography\n      }, \"Submit Application\"), __jsx(CircularProgress, {\n        size: 20,\n        thickness: 4,\n        className: clsx(classes.progress, _defineProperty({}, classes.show, loading))\n      }))));\n    }\n  }]);\n\n  return _temp;\n}(Component), _temp)));","map":null,"metadata":{},"sourceType":"module"}